// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package fakesql

import (
	context "context"

	"database/sql/driver"
	mock "github.com/stretchr/testify/mock"
)

// StmtExecContext is an autogenerated mock type for the StmtExecContext type
type StmtExecContext struct {
	mock.Mock
}

// ExecContext provides a mock function with given fields: ctx, args
func (_m *StmtExecContext) ExecContext(ctx context.Context, args []driver.NamedValue) (driver.Result, error) {
	ret := _m.Called(ctx, args)

	var r0 driver.Result
	if rf, ok := ret.Get(0).(func(context.Context, []driver.NamedValue) driver.Result); ok {
		r0 = rf(ctx, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []driver.NamedValue) error); ok {
		r1 = rf(ctx, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewStmtExecContext interface {
	mock.TestingT
	Cleanup(func())
}

// NewStmtExecContext creates a new instance of StmtExecContext. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStmtExecContext(t mockConstructorTestingTNewStmtExecContext) *StmtExecContext {
	mock := &StmtExecContext{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
