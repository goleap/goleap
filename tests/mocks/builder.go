package mocks

import (
	"context"

	"github.com/kitstack/dbkit/specs"
	"github.com/stretchr/testify/mock"
)

// FakeBuilder is an autogenerated mock type for the FakeBuilder type
type FakeBuilder[T specs.Model] struct {
	mock.Mock
}

// Connector provides a mock function with given fields:
func (_m *FakeBuilder[T]) Connector() specs.Connector {
	ret := _m.Called()

	var r0 specs.Connector
	if rf, ok := ret.Get(0).(func() specs.Connector); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.Connector)
		}
	}

	return r0
}

// Context provides a mock function with given fields:
func (_m *FakeBuilder[T]) Context() context.Context {
	ret := _m.Called()

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// Count provides a mock function with given fields:
func (_m *FakeBuilder[T]) Count() (int64, error) {
	ret := _m.Called()

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields:
func (_m *FakeBuilder[T]) Create() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: primaryKey
func (_m *FakeBuilder[T]) Delete(primaryKey interface{}) error {
	ret := _m.Called(primaryKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(primaryKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fields provides a mock function with given fields:
func (_m *FakeBuilder[T]) Fields() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Find provides a mock function with given fields:
func (_m *FakeBuilder[T]) Find() (T, error) {
	ret := _m.Called()

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func() (T, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() T); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(T)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields:
func (_m *FakeBuilder[T]) FindAll() ([]T, error) {
	ret := _m.Called()

	var r0 []T
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]T, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []T); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]T)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: primaryKey
func (_m *FakeBuilder[T]) Get(primaryKey interface{}) (T, error) {
	ret := _m.Called(primaryKey)

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) (T, error)); ok {
		return rf(primaryKey)
	}
	if rf, ok := ret.Get(0).(func(interface{}) T); ok {
		r0 = rf(primaryKey)
	} else {
		r0 = ret.Get(0).(T)
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(primaryKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Payload provides a mock function with given fields:
func (_m *FakeBuilder[T]) Payload() specs.PayloadAugmented[T] {
	ret := _m.Called()

	var r0 specs.PayloadAugmented[T]
	if rf, ok := ret.Get(0).(func() specs.PayloadAugmented[T]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.PayloadAugmented[T])
		}
	}

	return r0
}

// SetFields provides a mock function with given fields: field
func (_m *FakeBuilder[T]) SetFields(field ...string) specs.Builder[T] {
	_va := make([]interface{}, len(field))
	for _i := range field {
		_va[_i] = field[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 specs.Builder[T]
	if rf, ok := ret.Get(0).(func(...string) specs.Builder[T]); ok {
		r0 = rf(field...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.Builder[T])
		}
	}

	return r0
}

// SetLimit provides a mock function with given fields: limit
func (_m *FakeBuilder[T]) SetLimit(limit int) specs.Builder[T] {
	ret := _m.Called(limit)

	var r0 specs.Builder[T]
	if rf, ok := ret.Get(0).(func(int) specs.Builder[T]); ok {
		r0 = rf(limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.Builder[T])
		}
	}

	return r0
}

// SetModel provides a mock function with given fields: model
func (_m *FakeBuilder[T]) SetModel(model T) specs.Builder[T] {
	ret := _m.Called(model)

	var r0 specs.Builder[T]
	if rf, ok := ret.Get(0).(func(T) specs.Builder[T]); ok {
		r0 = rf(model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.Builder[T])
		}
	}

	return r0
}

// SetOffset provides a mock function with given fields: offset
func (_m *FakeBuilder[T]) SetOffset(offset int) specs.Builder[T] {
	ret := _m.Called(offset)

	var r0 specs.Builder[T]
	if rf, ok := ret.Get(0).(func(int) specs.Builder[T]); ok {
		r0 = rf(offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.Builder[T])
		}
	}

	return r0
}

// SetOrderBy provides a mock function with given fields: fields
func (_m *FakeBuilder[T]) SetOrderBy(fields ...string) specs.Builder[T] {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 specs.Builder[T]
	if rf, ok := ret.Get(0).(func(...string) specs.Builder[T]); ok {
		r0 = rf(fields...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.Builder[T])
		}
	}

	return r0
}

// SetWhere provides a mock function with given fields: condition
func (_m *FakeBuilder[T]) SetWhere(condition specs.Condition) specs.Builder[T] {
	ret := _m.Called(condition)

	var r0 specs.Builder[T]
	if rf, ok := ret.Get(0).(func(specs.Condition) specs.Builder[T]); ok {
		r0 = rf(condition)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.Builder[T])
		}
	}

	return r0
}

// Update provides a mock function with given fields:
func (_m *FakeBuilder[T]) Update() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Wheres provides a mock function with given fields:
func (_m *FakeBuilder[T]) Wheres() []specs.Condition {
	ret := _m.Called()

	var r0 []specs.Condition
	if rf, ok := ret.Get(0).(func() []specs.Condition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]specs.Condition)
		}
	}

	return r0
}

type mockConstructorTestingTNewBuilder interface {
	mock.TestingT
	Cleanup(func())
}

// NewFakeBuilder creates a new instance of FakeBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFakeBuilder[T specs.Model](t mockConstructorTestingTNewBuilder) *FakeBuilder[T] {
	fakeBuilder := &FakeBuilder[T]{}
	fakeBuilder.Mock.Test(t)

	t.Cleanup(func() { fakeBuilder.AssertExpectations(t) })

	return fakeBuilder
}
