// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	"github.com/kitstack/dbkit/specs"
	"github.com/stretchr/testify/mock"
)

// FakePayloadAugmented is an autogenerated mock type for the FakePayloadAugmented type
type FakePayloadAugmented[T specs.Model] struct {
	mock.Mock
}

// Database provides a mock function with given fields:
func (_m *FakePayloadAugmented[T]) Database() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Fields provides a mock function with given fields:
func (_m *FakePayloadAugmented[T]) Fields() []specs.DriverField {
	ret := _m.Called()

	var r0 []specs.DriverField
	if rf, ok := ret.Get(0).(func() []specs.DriverField); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]specs.DriverField)
		}
	}

	return r0
}

// Index provides a mock function with given fields:
func (_m *FakePayloadAugmented[T]) Index() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Join provides a mock function with given fields:
func (_m *FakePayloadAugmented[T]) Join() []specs.DriverJoin {
	ret := _m.Called()

	var r0 []specs.DriverJoin
	if rf, ok := ret.Get(0).(func() []specs.DriverJoin); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]specs.DriverJoin)
		}
	}

	return r0
}

// Limit provides a mock function with given fields:
func (_m *FakePayloadAugmented[T]) Limit() specs.DriverLimit {
	ret := _m.Called()

	var r0 specs.DriverLimit
	if rf, ok := ret.Get(0).(func() specs.DriverLimit); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.DriverLimit)
		}
	}

	return r0
}

// Mapping provides a mock function with given fields:
func (_m *FakePayloadAugmented[T]) Mapping() ([]interface{}, error) {
	ret := _m.Called()

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]interface{}, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OnScan provides a mock function with given fields: _a0
func (_m *FakePayloadAugmented[T]) OnScan(_a0 []interface{}) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func([]interface{}) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Result provides a mock function with given fields:
func (_m *FakePayloadAugmented[T]) Result() []T {
	ret := _m.Called()

	var r0 []T
	if rf, ok := ret.Get(0).(func() []T); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]T)
		}
	}

	return r0
}

// SetFields provides a mock function with given fields: _a0
func (_m *FakePayloadAugmented[T]) SetFields(_a0 []specs.DriverField) specs.Payload {
	ret := _m.Called(_a0)

	var r0 specs.Payload
	if rf, ok := ret.Get(0).(func([]specs.DriverField) specs.Payload); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.Payload)
		}
	}

	return r0
}

// SetJoins provides a mock function with given fields: _a0
func (_m *FakePayloadAugmented[T]) SetJoins(_a0 []specs.DriverJoin) specs.Payload {
	ret := _m.Called(_a0)

	var r0 specs.Payload
	if rf, ok := ret.Get(0).(func([]specs.DriverJoin) specs.Payload); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.Payload)
		}
	}

	return r0
}

// SetLimit provides a mock function with given fields: _a0
func (_m *FakePayloadAugmented[T]) SetLimit(_a0 specs.DriverLimit) specs.Payload {
	ret := _m.Called(_a0)

	var r0 specs.Payload
	if rf, ok := ret.Get(0).(func(specs.DriverLimit) specs.Payload); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.Payload)
		}
	}

	return r0
}

// SetWheres provides a mock function with given fields: _a0
func (_m *FakePayloadAugmented[T]) SetWheres(_a0 []specs.DriverWhere) specs.Payload {
	ret := _m.Called(_a0)

	var r0 specs.Payload
	if rf, ok := ret.Get(0).(func([]specs.DriverWhere) specs.Payload); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.Payload)
		}
	}

	return r0
}

// Table provides a mock function with given fields:
func (_m *FakePayloadAugmented[T]) Table() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Where provides a mock function with given fields:
func (_m *FakePayloadAugmented[T]) Where() []specs.DriverWhere {
	ret := _m.Called()

	var r0 []specs.DriverWhere
	if rf, ok := ret.Get(0).(func() []specs.DriverWhere); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]specs.DriverWhere)
		}
	}

	return r0
}

type mockConstructorTestingTNewPayloadAugmented interface {
	mock.TestingT
	Cleanup(func())
}

// NewFakePayloadAugmented creates a new instance of FakePayloadAugmented. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFakePayloadAugmented[T specs.Model](t mockConstructorTestingTNewPayloadAugmented) *FakePayloadAugmented[T] {
	fakePayloadAugmented := &FakePayloadAugmented[T]{}
	fakePayloadAugmented.Mock.Test(t)

	t.Cleanup(func() { fakePayloadAugmented.AssertExpectations(t) })

	return fakePayloadAugmented
}
