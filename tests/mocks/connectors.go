package mocks

import (
	"github.com/kitstack/dbkit/specs"
	"github.com/stretchr/testify/mock"
)

// FakeConnectors is an autogenerated mock type for the FakeConnectors type
type FakeConnectors struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0
func (_m *FakeConnectors) Add(_a0 specs.Connector) specs.ErrConnectorAlreadyAdded {
	ret := _m.Called(_a0)

	var r0 specs.ErrConnectorAlreadyAdded
	if rf, ok := ret.Get(0).(func(specs.Connector) specs.ErrConnectorAlreadyAdded); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.ErrConnectorAlreadyAdded)
		}
	}

	return r0
}

// Clear provides a mock function with given fields:
func (_m *FakeConnectors) Clear() {
	_m.Called()
}

// Get provides a mock function with given fields: name
func (_m *FakeConnectors) Get(name string) (specs.Connector, specs.ErrConnectorNotFound) {
	ret := _m.Called(name)

	var r0 specs.Connector
	var r1 specs.ErrConnectorNotFound
	if rf, ok := ret.Get(0).(func(string) (specs.Connector, specs.ErrConnectorNotFound)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) specs.Connector); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.Connector)
		}
	}

	if rf, ok := ret.Get(1).(func(string) specs.ErrConnectorNotFound); ok {
		r1 = rf(name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(specs.ErrConnectorNotFound)
		}
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *FakeConnectors) List() []specs.Connector {
	ret := _m.Called()

	var r0 []specs.Connector
	if rf, ok := ret.Get(0).(func() []specs.Connector); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]specs.Connector)
		}
	}

	return r0
}

// Remove provides a mock function with given fields: name
func (_m *FakeConnectors) Remove(name string) {
	_m.Called(name)
}

type mockConstructorTestingTNewConnectors interface {
	mock.TestingT
	Cleanup(func())
}

// NewFakeConnectors creates a new instance of FakeConnectors. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFakeConnectors(t mockConstructorTestingTNewConnectors) *FakeConnectors {
	fakeConnector := &FakeConnectors{}
	fakeConnector.Mock.Test(t)

	t.Cleanup(func() { fakeConnector.AssertExpectations(t) })

	return fakeConnector
}
