package mocks

import (
	"github.com/lab210-dev/dbkit/specs"
	"github.com/stretchr/testify/mock"
)

// FakeDriverField is an autogenerated mock type for the FakeDriverField type
type FakeDriverField struct {
	mock.Mock
}

func (_m *FakeDriverField) Column() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Index provides a mock function with given fields:
func (_m *FakeDriverField) Index() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *FakeDriverField) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NameInSchema provides a mock function with given fields:
func (_m *FakeDriverField) NameInModel() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SetIndex provides a mock function with given fields: index
func (_m *FakeDriverField) SetIndex(index int) specs.DriverField {
	ret := _m.Called(index)

	var r0 specs.DriverField
	if rf, ok := ret.Get(0).(func(int) specs.DriverField); ok {
		r0 = rf(index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.DriverField)
		}
	}

	return r0
}

// SetName provides a mock function with given fields: name
func (_m *FakeDriverField) SetName(name string) specs.DriverField {
	ret := _m.Called(name)

	var r0 specs.DriverField
	if rf, ok := ret.Get(0).(func(string) specs.DriverField); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.DriverField)
		}
	}

	return r0
}

// SetNameInSchema provides a mock function with given fields: nameInSchema
func (_m *FakeDriverField) SetNameInModel(nameInSchema string) specs.DriverField {
	ret := _m.Called(nameInSchema)

	var r0 specs.DriverField
	if rf, ok := ret.Get(0).(func(string) specs.DriverField); ok {
		r0 = rf(nameInSchema)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.DriverField)
		}
	}

	return r0
}

type mockConstructorTestingTNewDriverField interface {
	mock.TestingT
	Cleanup(func())
}

// NewFakeDriverField creates a new instance of FakeDriverField. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFakeDriverField(t mockConstructorTestingTNewDriverField) *FakeDriverField {
	fakeDriverField := &FakeDriverField{}
	fakeDriverField.Mock.Test(t)

	t.Cleanup(func() { fakeDriverField.AssertExpectations(t) })

	return fakeDriverField
}
