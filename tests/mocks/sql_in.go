package mocks

import "github.com/stretchr/testify/mock"

// FakeSqlIn is an autogenerated mock type for the FakeSqlIn type
type FakeSqlIn struct {
	mock.Mock
}

// Execute provides a mock function with given fields: query, args
func (_m *FakeSqlIn) Execute(query string, args ...interface{}) (string, []interface{}, error) {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 string
	var r1 []interface{}
	var r2 error
	if rf, ok := ret.Get(0).(func(string, ...interface{}) (string, []interface{}, error)); ok {
		return rf(query, args...)
	}
	if rf, ok := ret.Get(0).(func(string, ...interface{}) string); ok {
		r0 = rf(query, args...)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, ...interface{}) []interface{}); ok {
		r1 = rf(query, args...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]interface{})
		}
	}

	if rf, ok := ret.Get(2).(func(string, ...interface{}) error); ok {
		r2 = rf(query, args...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewSqlIn interface {
	mock.TestingT
	Cleanup(func())
}

// NewFakeSqlIn creates a new instance of FakeSqlIn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFakeSqlIn(t mockConstructorTestingTNewSqlIn) *FakeSqlIn {
	fakeSqlIn := &FakeSqlIn{}
	fakeSqlIn.Mock.Test(t)

	t.Cleanup(func() { fakeSqlIn.AssertExpectations(t) })

	return fakeSqlIn
}
