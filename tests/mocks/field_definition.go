package mocks

import (
	"github.com/lab210-dev/dbkit/specs"
	"github.com/stretchr/testify/mock"
	"reflect"
)

// FakeFieldDefinition is an autogenerated mock type for the FakeFieldDefinition type
type FakeFieldDefinition struct {
	mock.Mock
}

// IsSlice provides a mock function with given fields:
func (_m *FakeFieldDefinition) IsSlice() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FromSlice provides a mock function with given fields:
func (_m *FakeFieldDefinition) FromSlice() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Column provides a mock function with given fields:
func (_m *FakeFieldDefinition) Column() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Copy provides a mock function with given fields:
func (_m *FakeFieldDefinition) Copy() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0)
		}
	}

	return r0
}

// EmbeddedSchema provides a mock function with given fields:
func (_m *FakeFieldDefinition) EmbeddedSchema() specs.ModelDefinition {
	ret := _m.Called()

	var r0 specs.ModelDefinition
	if rf, ok := ret.Get(0).(func() specs.ModelDefinition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.ModelDefinition)
		}
	}

	return r0
}

// Field provides a mock function with given fields:
func (_m *FakeFieldDefinition) Field() specs.DriverField {
	ret := _m.Called()

	var r0 specs.DriverField
	if rf, ok := ret.Get(0).(func() specs.DriverField); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.DriverField)
		}
	}

	return r0
}

// FromSchemaTypeList provides a mock function with given fields:
func (_m *FakeFieldDefinition) FromSchemaTypeList() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Get provides a mock function with given fields:
func (_m *FakeFieldDefinition) Get() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0)
		}
	}

	return r0
}

// HasEmbeddedSchema provides a mock function with given fields:
func (_m *FakeFieldDefinition) HasEmbeddedSchema() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Index provides a mock function with given fields:
func (_m *FakeFieldDefinition) Index() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Init provides a mock function with given fields:
func (_m *FakeFieldDefinition) Init() {
	_m.Called()
}

// IsPrimaryKey provides a mock function with given fields:
func (_m *FakeFieldDefinition) IsPrimaryKey() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Join provides a mock function with given fields:
func (_m *FakeFieldDefinition) Join() []specs.DriverJoin {
	ret := _m.Called()

	var r0 []specs.DriverJoin
	if rf, ok := ret.Get(0).(func() []specs.DriverJoin); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]specs.DriverJoin)
		}
	}

	return r0
}

// Model provides a mock function with given fields:
func (_m *FakeFieldDefinition) Model() specs.ModelDefinition {
	ret := _m.Called()

	var r0 specs.ModelDefinition
	if rf, ok := ret.Get(0).(func() specs.ModelDefinition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.ModelDefinition)
		}
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *FakeFieldDefinition) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RecursiveFullName provides a mock function with given fields:
func (_m *FakeFieldDefinition) RecursiveFullName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Set provides a mock function with given fields: value
func (_m *FakeFieldDefinition) Set(value interface{}) {
	_m.Called(value)
}

// Tags provides a mock function with given fields:
func (_m *FakeFieldDefinition) Tags() map[string]string {
	ret := _m.Called()

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// Value provides a mock function with given fields:
func (_m *FakeFieldDefinition) Value() reflect.Value {
	ret := _m.Called()

	var r0 reflect.Value
	if rf, ok := ret.Get(0).(func() reflect.Value); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(reflect.Value)
	}

	return r0
}

type mockConstructorTestingTNewFieldDefinition interface {
	mock.TestingT
	Cleanup(func())
}

// NewFakeFieldDefinition creates a new instance of FakeFieldDefinition. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFakeFieldDefinition(t mockConstructorTestingTNewFieldDefinition) *FakeFieldDefinition {
	fakeFieldDefinition := &FakeFieldDefinition{}
	fakeFieldDefinition.Mock.Test(t)

	t.Cleanup(func() { fakeFieldDefinition.AssertExpectations(t) })

	return fakeFieldDefinition
}
