package mocks

import (
	"github.com/kitstack/dbkit/specs"
	"github.com/stretchr/testify/mock"
)

// FakePayloadConstruct is an autogenerated mock type for the FakePayloadConstruct type
type FakePayloadConstruct[T specs.Model] struct {
	mock.Mock
}

// NewPayload provides a mock function with given fields: model
func (_m *FakePayloadConstruct[T]) NewPayload(model ...specs.Model) specs.PayloadAugmented[T] {
	_va := make([]interface{}, len(model))
	for _i := range model {
		_va[_i] = model[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 specs.PayloadAugmented[T]
	if rf, ok := ret.Get(0).(func(...specs.Model) specs.PayloadAugmented[T]); ok {
		r0 = rf(model...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.PayloadAugmented[T])
		}
	}

	return r0
}

type mockConstructorTestingTNewNewPayload interface {
	mock.TestingT
	Cleanup(func())
}

// NewFakePayloadConstruct creates a new instance of FakePayloadConstruct. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFakePayloadConstruct[T specs.Model](t mockConstructorTestingTNewNewPayload) *FakePayloadConstruct[T] {
	fakePayloadConstruct := &FakePayloadConstruct[T]{}
	fakePayloadConstruct.Mock.Test(t)

	t.Cleanup(func() { fakePayloadConstruct.AssertExpectations(t) })

	return fakePayloadConstruct
}
