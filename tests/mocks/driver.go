package mocks

import (
	"context"
	"database/sql"
	"github.com/kitstack/dbkit/specs"
	"github.com/stretchr/testify/mock"
)

type Driver interface {
	New(config specs.Config) error
	Get() *sql.DB

	Select(ctx context.Context, payload specs.Payload) error
}

// FakeDriver is an autogenerated mock type for the FakeDriver type
type FakeDriver struct {
	mock.Mock
}

// Get provides a mock function with given fields:
func (_m *FakeDriver) Get() *sql.DB {
	ret := _m.Called()

	var r0 *sql.DB
	if rf, ok := ret.Get(0).(func() *sql.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DB)
		}
	}

	return r0
}

// New provides a mock function with given fields: _a0
func (_m *FakeDriver) New(_a0 specs.Config) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(specs.Config) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Select provides a mock function with given fields: ctx, payload
func (_m *FakeDriver) Select(ctx context.Context, payload specs.Payload) error {
	ret := _m.Called(ctx, payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, specs.Payload) error); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDriver interface {
	mock.TestingT
	Cleanup(func())
}

// NewFakeDriver creates a new instance of FakeDriver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFakeDriver(t mockConstructorTestingTNewDriver) *FakeDriver {
	fakeDriver := &FakeDriver{}
	fakeDriver.Mock.Test(t)

	t.Cleanup(func() { fakeDriver.AssertExpectations(t) })

	return fakeDriver
}
