package mocks

import (
	"github.com/lab210-dev/dbkit/specs"
	"github.com/stretchr/testify/mock"
	"reflect"
)

// FakeModelDefinition is an autogenerated mock type for the FakeModelDefinition type
type FakeModelDefinition struct {
	mock.Mock
}

// Copy provides a mock function with given fields:
func (_m *FakeModelDefinition) Copy() specs.Model {
	ret := _m.Called()

	var r0 specs.Model
	if rf, ok := ret.Get(0).(func() specs.Model); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.Model)
		}
	}

	return r0
}

// Counter provides a mock function with given fields:
func (_m *FakeModelDefinition) Counter() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// DatabaseName provides a mock function with given fields:
func (_m *FakeModelDefinition) DatabaseName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FieldByName provides a mock function with given fields:
func (_m *FakeModelDefinition) FieldByName() map[string]specs.FieldDefinition {
	ret := _m.Called()

	var r0 map[string]specs.FieldDefinition
	if rf, ok := ret.Get(0).(func() map[string]specs.FieldDefinition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]specs.FieldDefinition)
		}
	}

	return r0
}

// Fields provides a mock function with given fields:
func (_m *FakeModelDefinition) Fields() []specs.FieldDefinition {
	ret := _m.Called()

	var r0 []specs.FieldDefinition
	if rf, ok := ret.Get(0).(func() []specs.FieldDefinition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]specs.FieldDefinition)
		}
	}

	return r0
}

// FromField provides a mock function with given fields:
func (_m *FakeModelDefinition) FromField() specs.FieldDefinition {
	ret := _m.Called()

	var r0 specs.FieldDefinition
	if rf, ok := ret.Get(0).(func() specs.FieldDefinition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.FieldDefinition)
		}
	}

	return r0
}

// GetFieldByColumn provides a mock function with given fields: column
func (_m *FakeModelDefinition) GetFieldByColumn(column string) (specs.FieldDefinition, error) {
	ret := _m.Called(column)

	var r0 specs.FieldDefinition
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (specs.FieldDefinition, error)); ok {
		return rf(column)
	}
	if rf, ok := ret.Get(0).(func(string) specs.FieldDefinition); ok {
		r0 = rf(column)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.FieldDefinition)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(column)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFieldByName provides a mock function with given fields: name
func (_m *FakeModelDefinition) GetFieldByName(name string) (specs.FieldDefinition, specs.FieldNotFoundError) {
	ret := _m.Called(name)

	var r0 specs.FieldDefinition
	var r1 specs.FieldNotFoundError
	if rf, ok := ret.Get(0).(func(string) (specs.FieldDefinition, specs.FieldNotFoundError)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) specs.FieldDefinition); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.FieldDefinition)
		}
	}

	if rf, ok := ret.Get(1).(func(string) specs.FieldNotFoundError); ok {
		r1 = rf(name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(specs.FieldNotFoundError)
		}
	}

	return r0, r1
}

// GetPrimaryField provides a mock function with given fields:
func (_m *FakeModelDefinition) GetPrimaryField() (specs.FieldDefinition, specs.PrimaryFieldNotFoundError) {
	ret := _m.Called()

	var r0 specs.FieldDefinition
	var r1 specs.PrimaryFieldNotFoundError
	if rf, ok := ret.Get(0).(func() (specs.FieldDefinition, specs.PrimaryFieldNotFoundError)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() specs.FieldDefinition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.FieldDefinition)
		}
	}

	if rf, ok := ret.Get(1).(func() specs.PrimaryFieldNotFoundError); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(specs.PrimaryFieldNotFoundError)
		}
	}

	return r0, r1
}

// Index provides a mock function with given fields:
func (_m *FakeModelDefinition) Index() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// ModelOrigin provides a mock function with given fields:
func (_m *FakeModelDefinition) ModelOrigin() reflect.Value {
	ret := _m.Called()

	var r0 reflect.Value
	if rf, ok := ret.Get(0).(func() reflect.Value); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(reflect.Value)
	}

	return r0
}

// ModelValue provides a mock function with given fields:
func (_m *FakeModelDefinition) ModelValue() reflect.Value {
	ret := _m.Called()

	var r0 reflect.Value
	if rf, ok := ret.Get(0).(func() reflect.Value); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(reflect.Value)
	}

	return r0
}

// Parse provides a mock function with given fields:
func (_m *FakeModelDefinition) Parse() specs.ModelDefinition {
	ret := _m.Called()

	var r0 specs.ModelDefinition
	if rf, ok := ret.Get(0).(func() specs.ModelDefinition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.ModelDefinition)
		}
	}

	return r0
}

// SetFromField provides a mock function with given fields: fromField
func (_m *FakeModelDefinition) SetFromField(fromField specs.FieldDefinition) specs.ModelDefinition {
	ret := _m.Called(fromField)

	var r0 specs.ModelDefinition
	if rf, ok := ret.Get(0).(func(specs.FieldDefinition) specs.ModelDefinition); ok {
		r0 = rf(fromField)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.ModelDefinition)
		}
	}

	return r0
}

// SetIndex provides a mock function with given fields: index
func (_m *FakeModelDefinition) SetIndex(index int) specs.ModelDefinition {
	ret := _m.Called(index)

	var r0 specs.ModelDefinition
	if rf, ok := ret.Get(0).(func(int) specs.ModelDefinition); ok {
		r0 = rf(index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.ModelDefinition)
		}
	}

	return r0
}

// TableName provides a mock function with given fields:
func (_m *FakeModelDefinition) TableName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewModelDefinition interface {
	mock.TestingT
	Cleanup(func())
}

// NewFakeModelDefinition creates a new instance of FakeModelDefinition. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFakeModelDefinition(t mockConstructorTestingTNewModelDefinition) *FakeModelDefinition {
	fakeModelDefinition := &FakeModelDefinition{}
	fakeModelDefinition.Mock.Test(t)

	t.Cleanup(func() { fakeModelDefinition.AssertExpectations(t) })

	return fakeModelDefinition
}
