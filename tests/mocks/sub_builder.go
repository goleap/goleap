package mocks

import (
	"github.com/kitstack/dbkit/specs"
	"github.com/stretchr/testify/mock"
)

// FakeSubBuilder is an autogenerated mock type for the FakeNewSubBuilder type
type FakeSubBuilder[T specs.Model] struct {
	mock.Mock
}

// AddJob provides a mock function with given fields: _a0, _a1, _a2
func (_m *FakeSubBuilder[T]) AddJob(_a0 specs.Builder[T], _a1 string, _a2 specs.ModelDefinition) specs.SubBuilder[T] {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 specs.SubBuilder[T]
	if rf, ok := ret.Get(0).(func(specs.Builder[T], string, specs.ModelDefinition) specs.SubBuilder[T]); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.SubBuilder[T])
		}
	}

	return r0
}

// Execute provides a mock function with given fields:
func (_m *FakeSubBuilder[T]) Execute() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewSubBuilder interface {
	mock.TestingT
	Cleanup(func())
}

// NewFakeSubBuilder creates a new instance of FakeNewSubBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFakeSubBuilder[T specs.Model](t mockConstructorTestingTNewSubBuilder) *FakeSubBuilder[T] {
	fakeSubBuilder := &FakeSubBuilder[T]{}
	fakeSubBuilder.Mock.Test(t)

	t.Cleanup(func() { fakeSubBuilder.AssertExpectations(t) })

	return fakeSubBuilder
}
