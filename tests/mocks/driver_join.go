package mocks

import (
	"github.com/lab210-dev/dbkit/specs"
	"github.com/stretchr/testify/mock"
)

// FakeDriverJoin is an autogenerated mock type for the FakeDriverJoin type
type FakeDriverJoin struct {
	mock.Mock
}

// Formatted provides a mock function with given fields:
func (_m *FakeDriverJoin) Formatted() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// From provides a mock function with given fields:
func (_m *FakeDriverJoin) From() specs.DriverField {
	ret := _m.Called()

	var r0 specs.DriverField
	if rf, ok := ret.Get(0).(func() specs.DriverField); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.DriverField)
		}
	}

	return r0
}

// Method provides a mock function with given fields:
func (_m *FakeDriverJoin) Method() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SetFrom provides a mock function with given fields: field
func (_m *FakeDriverJoin) SetFrom(field specs.DriverField) specs.DriverJoin {
	ret := _m.Called(field)

	var r0 specs.DriverJoin
	if rf, ok := ret.Get(0).(func(specs.DriverField) specs.DriverJoin); ok {
		r0 = rf(field)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.DriverJoin)
		}
	}

	return r0
}

// SetMethod provides a mock function with given fields: method
func (_m *FakeDriverJoin) SetMethod(method specs.JoinMethod) specs.DriverJoin {
	ret := _m.Called(method)

	var r0 specs.DriverJoin
	if rf, ok := ret.Get(0).(func(specs.JoinMethod) specs.DriverJoin); ok {
		r0 = rf(method)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.DriverJoin)
		}
	}

	return r0
}

// SetTo provides a mock function with given fields: field
func (_m *FakeDriverJoin) SetTo(field specs.DriverField) specs.DriverJoin {
	ret := _m.Called(field)

	var r0 specs.DriverJoin
	if rf, ok := ret.Get(0).(func(specs.DriverField) specs.DriverJoin); ok {
		r0 = rf(field)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.DriverJoin)
		}
	}

	return r0
}

// To provides a mock function with given fields:
func (_m *FakeDriverJoin) To() specs.DriverField {
	ret := _m.Called()

	var r0 specs.DriverField
	if rf, ok := ret.Get(0).(func() specs.DriverField); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.DriverField)
		}
	}

	return r0
}

// Validate provides a mock function with given fields:
func (_m *FakeDriverJoin) Validate() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDriverJoin interface {
	mock.TestingT
	Cleanup(func())
}

// NewFakeDriverJoin creates a new instance of FakeDriverJoin. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFakeDriverJoin(t mockConstructorTestingTNewDriverJoin) *FakeDriverJoin {
	fakeDriverJoin := &FakeDriverJoin{}
	fakeDriverJoin.Mock.Test(t)

	t.Cleanup(func() { fakeDriverJoin.AssertExpectations(t) })

	return fakeDriverJoin
}
