package mocks

import (
	"github.com/lab210-dev/dbkit/specs"
	"github.com/stretchr/testify/mock"
)

// FakeDriverJoin is an autogenerated mock type for the FakeDriverJoin type
type FakeDriverJoin struct {
	mock.Mock
}

// FromKey provides a mock function with given fields:
func (_m *FakeDriverJoin) FromKey() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FromTable provides a mock function with given fields:
func (_m *FakeDriverJoin) FromTable() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FromTableIndex provides a mock function with given fields:
func (_m *FakeDriverJoin) FromTableIndex() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Method provides a mock function with given fields:
func (_m *FakeDriverJoin) Method() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SetFromKey provides a mock function with given fields: fromKey
func (_m *FakeDriverJoin) SetFromKey(fromKey string) specs.DriverJoin {
	ret := _m.Called(fromKey)

	var r0 specs.DriverJoin
	if rf, ok := ret.Get(0).(func(string) specs.DriverJoin); ok {
		r0 = rf(fromKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.DriverJoin)
		}
	}

	return r0
}

// SetFromTable provides a mock function with given fields: fromTable
func (_m *FakeDriverJoin) SetFromTable(fromTable string) specs.DriverJoin {
	ret := _m.Called(fromTable)

	var r0 specs.DriverJoin
	if rf, ok := ret.Get(0).(func(string) specs.DriverJoin); ok {
		r0 = rf(fromTable)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.DriverJoin)
		}
	}

	return r0
}

// SetFromTableIndex provides a mock function with given fields: fromTableIndex
func (_m *FakeDriverJoin) SetFromTableIndex(fromTableIndex int) specs.DriverJoin {
	ret := _m.Called(fromTableIndex)

	var r0 specs.DriverJoin
	if rf, ok := ret.Get(0).(func(int) specs.DriverJoin); ok {
		r0 = rf(fromTableIndex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.DriverJoin)
		}
	}

	return r0
}

// SetMethod provides a mock function with given fields: method
func (_m *FakeDriverJoin) SetMethod(method specs.JoinMethod) specs.DriverJoin {
	ret := _m.Called(method)

	var r0 specs.DriverJoin
	if rf, ok := ret.Get(0).(func(specs.JoinMethod) specs.DriverJoin); ok {
		r0 = rf(method)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.DriverJoin)
		}
	}

	return r0
}

// SetToKey provides a mock function with given fields: toKey
func (_m *FakeDriverJoin) SetToKey(toKey string) specs.DriverJoin {
	ret := _m.Called(toKey)

	var r0 specs.DriverJoin
	if rf, ok := ret.Get(0).(func(string) specs.DriverJoin); ok {
		r0 = rf(toKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.DriverJoin)
		}
	}

	return r0
}

// SetToTable provides a mock function with given fields: toTable
func (_m *FakeDriverJoin) SetToTable(toTable string) specs.DriverJoin {
	ret := _m.Called(toTable)

	var r0 specs.DriverJoin
	if rf, ok := ret.Get(0).(func(string) specs.DriverJoin); ok {
		r0 = rf(toTable)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.DriverJoin)
		}
	}

	return r0
}

// SetToTableIndex provides a mock function with given fields: toTableIndex
func (_m *FakeDriverJoin) SetToTableIndex(toTableIndex int) specs.DriverJoin {
	ret := _m.Called(toTableIndex)

	var r0 specs.DriverJoin
	if rf, ok := ret.Get(0).(func(int) specs.DriverJoin); ok {
		r0 = rf(toTableIndex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.DriverJoin)
		}
	}

	return r0
}

// ToKey provides a mock function with given fields:
func (_m *FakeDriverJoin) ToKey() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ToTable provides a mock function with given fields:
func (_m *FakeDriverJoin) ToTable() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ToTableIndex provides a mock function with given fields:
func (_m *FakeDriverJoin) ToTableIndex() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

type mockConstructorTestingTNewJoin interface {
	mock.TestingT
	Cleanup(func())
}

// NewFakeDriverJoin creates a new instance of FakeDriverJoin. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFakeDriverJoin(t mockConstructorTestingTNewJoin) *FakeDriverJoin {
	fakeJoin := &FakeDriverJoin{}
	fakeJoin.Mock.Test(t)

	t.Cleanup(func() { fakeJoin.AssertExpectations(t) })

	return fakeJoin
}
