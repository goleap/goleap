package mocks

import (
	"github.com/kitstack/dbkit/specs"
	"github.com/stretchr/testify/mock"
)

// FakeNewSubBuilderJob is an autogenerated mock type for the FakeNewSubBuilderJob type
type FakeNewSubBuilderJob[T specs.Model] struct {
	mock.Mock
}

// FakeNewSubBuilder provides a mock function with given fields:
func (_m *FakeNewSubBuilderJob[T]) NewSubBuilderJob(builder specs.Builder[T], fundamentalName string, model specs.ModelDefinition) specs.SubBuilderJob[T] {
	ret := _m.Called(builder, fundamentalName, model)

	var r0 specs.SubBuilderJob[T]
	if rf, ok := ret.Get(0).(func(specs.Builder[T], string, specs.ModelDefinition) specs.SubBuilderJob[T]); ok {
		r0 = rf(builder, fundamentalName, model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.SubBuilderJob[T])
		}
	}

	return r0
}

type mockConstructorTestingTNewNewSubBuilderJob interface {
	mock.TestingT
	Cleanup(func())
}

// NewFakeNewSubBuilderJob creates a new instance of FakeNewSubBuilderJob. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFakeNewSubBuilderJob[T specs.Model](t mockConstructorTestingTNewNewSubBuilderJob) *FakeNewSubBuilderJob[T] {
	fakeSubBuilderJob := &FakeNewSubBuilderJob[T]{}
	fakeSubBuilderJob.Mock.Test(t)

	t.Cleanup(func() { fakeSubBuilderJob.AssertExpectations(t) })

	return fakeSubBuilderJob
}
