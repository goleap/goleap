package mocks

import (
	"github.com/kitstack/dbkit/specs"
	"github.com/stretchr/testify/mock"
)

// FakeUseModelDefinition is an autogenerated mock type for the FakeUseModelDefinition type
type FakeUseModelDefinition struct {
	mock.Mock
}

// Execute provides a mock function with given fields: model
func (_m *FakeUseModelDefinition) Use(model specs.Model) specs.ModelDefinition {
	ret := _m.Called(model)

	var r0 specs.ModelDefinition
	if rf, ok := ret.Get(0).(func(specs.Model) specs.ModelDefinition); ok {
		r0 = rf(model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.ModelDefinition)
		}
	}

	return r0
}

type mockConstructorTestingTNewUseModelDefinition interface {
	mock.TestingT
	Cleanup(func())
}

// NewFakeUseModelDefinition creates a new instance of FakeUseModelDefinition. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFakeUseModelDefinition(t mockConstructorTestingTNewUseModelDefinition) *FakeUseModelDefinition {
	fakeUseModelDefinition := &FakeUseModelDefinition{}
	fakeUseModelDefinition.Mock.Test(t)

	t.Cleanup(func() { fakeUseModelDefinition.AssertExpectations(t) })

	return fakeUseModelDefinition
}
