package mocks

import (
	"github.com/stretchr/testify/mock"
)

// FakeIn is an autogenerated mock type for the sqlx.In type
type FakeIn struct {
	mock.Mock
}

func (_m *FakeIn) GenerateInArgument(query string, args ...any) (string, []any, error) {
	var _ca []any
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 string
	var r1 []any
	var r2 error
	if rf, ok := ret.Get(0).(func(string, ...any) (string, []any, error)); ok {
		return rf(query, args...)
	}
	if rf, ok := ret.Get(0).(func(string, ...any) string); ok {
		r0 = rf(query, args...)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, ...any) []any); ok {
		r1 = rf(query, args...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]any)
		}
	}

	if rf, ok := ret.Get(2).(func(string, ...any) error); ok {
		r2 = rf(query, args...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewIn interface {
	mock.TestingT
	Cleanup(func())
}

// NewFakeIn creates a new instance of FakeDriver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFakeIn(t mockConstructorTestingTNewIn) *FakeIn {
	fakeDriver := &FakeIn{}
	fakeDriver.Mock.Test(t)

	t.Cleanup(func() { fakeDriver.AssertExpectations(t) })

	return fakeDriver
}
