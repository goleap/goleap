package mocks

import (
	"context"
	"database/sql"
	"github.com/kitstack/dbkit/specs"
	"github.com/stretchr/testify/mock"
)

// FakeConnector is an autogenerated mock type for the FakeConnector type
type FakeConnector struct {
	mock.Mock
}

// Config provides a mock function with given fields:
func (_m *FakeConnector) Config() specs.Config {
	ret := _m.Called()

	var r0 specs.Config
	if rf, ok := ret.Get(0).(func() specs.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.Config)
		}
	}

	return r0
}

// Get provides a mock function with given fields:
func (_m *FakeConnector) Get() *sql.DB {
	ret := _m.Called()

	var r0 *sql.DB
	if rf, ok := ret.Get(0).(func() *sql.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DB)
		}
	}

	return r0
}

// Manager provides a mock function with given fields:
func (_m *FakeConnector) Manager() specs.ConnectionManager {
	ret := _m.Called()

	var r0 specs.ConnectionManager
	if rf, ok := ret.Get(0).(func() specs.ConnectionManager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.ConnectionManager)
		}
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *FakeConnector) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// New provides a mock function with given fields: _a0
func (_m *FakeConnector) New(_a0 specs.Config) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(specs.Config) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Select provides a mock function with given fields: ctx, payload
func (_m *FakeConnector) Select(ctx context.Context, payload specs.Payload) error {
	ret := _m.Called(ctx, payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, specs.Payload) error); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetName provides a mock function with given fields: name
func (_m *FakeConnector) SetName(name string) specs.Connector {
	ret := _m.Called(name)

	var r0 specs.Connector
	if rf, ok := ret.Get(0).(func(string) specs.Connector); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(specs.Connector)
		}
	}

	return r0
}

type mockConstructorTestingTNewConnector interface {
	mock.TestingT
	Cleanup(func())
}

// NewFakeConnector creates a new instance of FakeConnector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFakeConnector(t mockConstructorTestingTNewConnector) *FakeConnector {
	fakeConnector := &FakeConnector{}
	fakeConnector.Mock.Test(t)

	t.Cleanup(func() { fakeConnector.AssertExpectations(t) })

	return fakeConnector
}
