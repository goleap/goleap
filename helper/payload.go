package helper

import (
	"github.com/stretchr/testify/mock"
)

type Payload interface {
	Table() string
	Database() string
	Index() int
	Fields() []Field
	Join() []Join
	Where() []Where
	Mapping() []any
	OnScan([]any) error
}

// FakePayload is an autogenerated mock type for the FakePayload type
type FakePayload struct {
	mock.Mock
}

// Database provides a mock function with given fields:
func (_m *FakePayload) Database() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Fields provides a mock function with given fields:
func (_m *FakePayload) Fields() []Field {
	ret := _m.Called()

	var r0 []Field
	if rf, ok := ret.Get(0).(func() []Field); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Field)
		}
	}

	return r0
}

// Index provides a mock function with given fields:
func (_m *FakePayload) Index() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// FakeJoin provides a mock function with given fields:
func (_m *FakePayload) Join() []Join {
	ret := _m.Called()

	var r0 []Join
	if rf, ok := ret.Get(0).(func() []Join); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Join)
		}
	}

	return r0
}

// Mapping provides a mock function with given fields:
func (_m *FakePayload) Mapping() []interface{} {
	ret := _m.Called()

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func() []interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

// OnScan provides a mock function with given fields: _a0
func (_m *FakePayload) OnScan(_a0 []interface{}) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func([]interface{}) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Table provides a mock function with given fields:
func (_m *FakePayload) Table() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FakeWhere provides a mock function with given fields:
func (_m *FakePayload) Where() []Where {
	ret := _m.Called()

	var r0 []Where
	if rf, ok := ret.Get(0).(func() []Where); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Where)
		}
	}

	return r0
}

type mockConstructorTestingTNewPayload interface {
	mock.TestingT
	Cleanup(func())
}

// NewFakePayload creates a new instance of FakePayload. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFakePayload(t mockConstructorTestingTNewPayload) *FakePayload {
	mock := &FakePayload{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
