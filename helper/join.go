package helper

import (
	"github.com/stretchr/testify/mock"
)

type JoinMethod int
type Join interface {
	FromTable() string
	FromTableIndex() int
	ToTable() string
	ToTableIndex() int
	FromKey() string
	ToKey() string
	Method() string

	SetMethod(method JoinMethod) Join
	SetFromTable(fromTable string) Join
	SetFromTableIndex(fromTableIndex int) Join
	SetToTable(toTable string) Join
	SetToTableIndex(toTableIndex int) Join
	SetFromKey(fromKey string) Join
	SetToKey(toKey string) Join
}

// FakeJoin is an autogenerated mock type for the FakeJoin type
type FakeJoin struct {
	mock.Mock
}

// FromKey provides a mock function with given fields:
func (_m *FakeJoin) FromKey() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FromTable provides a mock function with given fields:
func (_m *FakeJoin) FromTable() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FromTableIndex provides a mock function with given fields:
func (_m *FakeJoin) FromTableIndex() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Method provides a mock function with given fields:
func (_m *FakeJoin) Method() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SetFromKey provides a mock function with given fields: fromKey
func (_m *FakeJoin) SetFromKey(fromKey string) Join {
	ret := _m.Called(fromKey)

	var r0 Join
	if rf, ok := ret.Get(0).(func(string) Join); ok {
		r0 = rf(fromKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Join)
		}
	}

	return r0
}

// SetFromTable provides a mock function with given fields: fromTable
func (_m *FakeJoin) SetFromTable(fromTable string) Join {
	ret := _m.Called(fromTable)

	var r0 Join
	if rf, ok := ret.Get(0).(func(string) Join); ok {
		r0 = rf(fromTable)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Join)
		}
	}

	return r0
}

// SetFromTableIndex provides a mock function with given fields: fromTableIndex
func (_m *FakeJoin) SetFromTableIndex(fromTableIndex int) Join {
	ret := _m.Called(fromTableIndex)

	var r0 Join
	if rf, ok := ret.Get(0).(func(int) Join); ok {
		r0 = rf(fromTableIndex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Join)
		}
	}

	return r0
}

// SetMethod provides a mock function with given fields: method
func (_m *FakeJoin) SetMethod(method JoinMethod) Join {
	ret := _m.Called(method)

	var r0 Join
	if rf, ok := ret.Get(0).(func(JoinMethod) Join); ok {
		r0 = rf(method)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Join)
		}
	}

	return r0
}

// SetToKey provides a mock function with given fields: toKey
func (_m *FakeJoin) SetToKey(toKey string) Join {
	ret := _m.Called(toKey)

	var r0 Join
	if rf, ok := ret.Get(0).(func(string) Join); ok {
		r0 = rf(toKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Join)
		}
	}

	return r0
}

// SetToTable provides a mock function with given fields: toTable
func (_m *FakeJoin) SetToTable(toTable string) Join {
	ret := _m.Called(toTable)

	var r0 Join
	if rf, ok := ret.Get(0).(func(string) Join); ok {
		r0 = rf(toTable)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Join)
		}
	}

	return r0
}

// SetToTableIndex provides a mock function with given fields: toTableIndex
func (_m *FakeJoin) SetToTableIndex(toTableIndex int) Join {
	ret := _m.Called(toTableIndex)

	var r0 Join
	if rf, ok := ret.Get(0).(func(int) Join); ok {
		r0 = rf(toTableIndex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Join)
		}
	}

	return r0
}

// ToKey provides a mock function with given fields:
func (_m *FakeJoin) ToKey() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ToTable provides a mock function with given fields:
func (_m *FakeJoin) ToTable() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ToTableIndex provides a mock function with given fields:
func (_m *FakeJoin) ToTableIndex() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

type mockConstructorTestingTNewJoin interface {
	mock.TestingT
	Cleanup(func())
}

// NewFakeJoin creates a new instance of FakeJoin. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFakeJoin(t mockConstructorTestingTNewJoin) *FakeJoin {
	mock := &FakeJoin{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
