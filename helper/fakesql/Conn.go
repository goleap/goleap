// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package fakesql

import (
	"database/sql/driver"
	mock "github.com/stretchr/testify/mock"
)

// FakeConn is an autogenerated mock type for the FakeConn type
type FakeConn struct {
	mock.Mock
}

// Begin provides a mock function with given fields:
func (_m *FakeConn) Begin() (driver.Tx, error) {
	ret := _m.Called()

	var r0 driver.Tx
	if rf, ok := ret.Get(0).(func() driver.Tx); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Tx)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *FakeConn) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Prepare provides a mock function with given fields: query
func (_m *FakeConn) Prepare(query string) (driver.Stmt, error) {
	ret := _m.Called(query)

	var r0 driver.Stmt
	if rf, ok := ret.Get(0).(func(string) driver.Stmt); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Stmt)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewConn interface {
	mock.TestingT
	Cleanup(func())
}

// NewFakeConn creates a new instance of FakeConn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFakeConn(t mockConstructorTestingTNewConn) *FakeConn {
	mock := &FakeConn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
