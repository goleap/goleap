// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package fakesql

import (
	context "context"
	"database/sql/driver"

	mock "github.com/stretchr/testify/mock"
)

// Connector is an autogenerated mock type for the Connector type
type Connector struct {
	mock.Mock
}

// Connect provides a mock function with given fields: _a0
func (_m *Connector) Connect(_a0 context.Context) (driver.Conn, error) {
	ret := _m.Called(_a0)

	var r0 driver.Conn
	if rf, ok := ret.Get(0).(func(context.Context) driver.Conn); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Conn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeDriver provides a mock function with given fields:
func (_m *Connector) Driver() driver.Driver {
	ret := _m.Called()

	var r0 driver.Driver
	if rf, ok := ret.Get(0).(func() driver.Driver); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Driver)
		}
	}

	return r0
}

type mockConstructorTestingTNewConnector interface {
	mock.TestingT
	Cleanup(func())
}

// NewConnector creates a new instance of Connector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConnector(t mockConstructorTestingTNewConnector) *Connector {
	mock := &Connector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
